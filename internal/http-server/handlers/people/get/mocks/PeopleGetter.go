// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "predictor/internal/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// PeopleGetter is an autogenerated mock type for the PeopleGetter type
type PeopleGetter struct {
	mock.Mock
}

// GetPeople provides a mock function with given fields: limit, offset, name, surname, patronym, gender, nationality, age
func (_m *PeopleGetter) GetPeople(limit int64, offset int64, name string, surname string, patronym string, gender string, nationality string, age int) ([]models.People, int64, error) {
	ret := _m.Called(limit, offset, name, surname, patronym, gender, nationality, age)

	if len(ret) == 0 {
		panic("no return value specified for GetPeople")
	}

	var r0 []models.People
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int64, int64, string, string, string, string, string, int) ([]models.People, int64, error)); ok {
		return rf(limit, offset, name, surname, patronym, gender, nationality, age)
	}
	if rf, ok := ret.Get(0).(func(int64, int64, string, string, string, string, string, int) []models.People); ok {
		r0 = rf(limit, offset, name, surname, patronym, gender, nationality, age)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.People)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64, string, string, string, string, string, int) int64); ok {
		r1 = rf(limit, offset, name, surname, patronym, gender, nationality, age)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int64, int64, string, string, string, string, string, int) error); ok {
		r2 = rf(limit, offset, name, surname, patronym, gender, nationality, age)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewPeopleGetter creates a new instance of PeopleGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPeopleGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *PeopleGetter {
	mock := &PeopleGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
